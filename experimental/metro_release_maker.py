#!/usr/bin/python

# Images:
#
# (legend)
# ! = REQUIRED (input)
# o = GENERATED by ImageMagick (output)
#
#
# !  home_featured_logo
# !  home_featured_background
# o  home_featured_background_blur
# !  promo_image_large_nobrand
# !  promo_image_large
# o  promo_image_medium_nobrand
# o  promo_image_medium
# o  promo_image_small_nobrand
# o  promo_image_small
# !  promo_box
# !  product_square
# !  product_circle
# !  carousels
#

import json
import os
import subprocess

gMagickPath      = ""
gInputPath       = ""
gOutputPath      = ""
gContentJson     = None
gMediaAssetsDict = dict()
gCarouselsDict   = dict()

def debug_print(thing):
    # Uncomment this line to debug:
    #print( str(thing) )
    pass


#------------------------------------------------------------------------------
#  ImageMagick (TODO: use official python bindings).
#------------------------------------------------------------------------------
def str_to_dim(string):
    s = string.split("x")
    return int(s[0]), int(s[1])

def dim_to_str(dim):
    (width, height) = dim
    return str(width) + "x" + str(height)

def magick_get_dimensions(path):
    output = subprocess.Popen(
        ["magick", "identify", "-format", "%[fx:w]x%[fx:h]", path],
        stdout=subprocess.PIPE
    ).stdout.read()
    return str_to_dim(output)

def magick_convert(ipath, opath, resize=None, other_args=None):
    args = []
    if other_args == None:
        other_args = []

    if(resize != None):
        args = ["magick", "convert"] + other_args + ["-resize", dim_to_str(resize), ipath, opath]
    else:        
        args = ["magick", "convert"] + other_args + [ipath, opath]

    debug_print("running: " + " ".join(args))
    subprocess.Popen(args).wait()


#------------------------------------------------------------------------------
#  Loading inputs
#------------------------------------------------------------------------------
def init_paths():
    global gMagickPath, gInputPath, gOutputPath
    home = os.path.expanduser("~")
    # TODO: rm hard-coded paths and add Windows support.
    gMagickPath = "/ImageMagick-7.0.8"
    gInputPath  = home + "/MetroRelease/in"
    gOutputPath = home + "/MetroRelease/out"
    if not os.path.exists(gOutputPath):
        os.makedirs(gOutputPath);

def image_file_name(path):
    (root, ext) = os.path.splitext(path)
    if ext in [".jpg", ".jpeg", ".png"]:
        return root
    else:
        return None

def load_input_asset_paths():
    debug_print("load_input_asset_paths():")
    for f in os.listdir(gInputPath):
        name = image_file_name(f) # filename without extension
        if name != None:
            debug_print("  Found image: "+f)
            value = gInputPath + "/" + f

            # Add dict entry
            if f.startswith("carousels_"):
                display_order = name.split("_")[1]
                gCarouselsDict[display_order] = value
            else:
                gMediaAssetsDict[name] = value

    debug_print("  gCarouselsDict = " + str(gCarouselsDict))
    debug_print("  gMediaAssetsDict = " + str(gMediaAssetsDict))

def load_input_content_json():
    debug_print("load_input_content_json():")
    global gContentJson
    with open(gInputPath + "/content.json") as f:
        gContentJson = json.load(f)
    debug_print("  gContentJson = " + str(gContentJson))


#------------------------------------------------------------------------------
#  Generating PNGs
#------------------------------------------------------------------------------
def process_input_asset(input_path):
    debug_print("process_input_asset(input_path="+input_path+")")

    # Get paths
    (root, ext) = os.path.splitext(input_path)
    basedir  = gOutputPath + "/content/assets/game/"
    basepath = basedir + os.path.basename(root)
    if not os.path.exists(basedir):
        os.makedirs(basedir)
    
    # Get dimensions
    (width, height) = magick_get_dimensions(input_path)
    debug_print("  size = "+str(width)+"x"+str(height))
    debug_print("  basepath = "+str(basepath))
    
    magick_convert( input_path, basepath + "_@3x.png"  , None               )
    magick_convert( input_path, basepath + "_@1.5x.png", (width/2,height/2) )
    magick_convert( input_path, basepath + ".png"      , (width/3,height/3) )

def generate_all_image_assets():
    print "Generating low-res assets."
    all_paths = gCarouselsDict.values() + gMediaAssetsDict.values()
    for path in all_paths:
        process_input_asset(path)

    # Generate home_featured_background_blur
    print "Generating home_featured_background_blur."
    tmpdir = gOutputPath + "/tmp/"
    if not os.path.exists(tmpdir):
        os.makedirs(tmpdir)
    blursrc = gMediaAssetsDict["home_featured_background"]
    blurdst = tmpdir + "home_featured_background_blur.png"
    magick_convert( blursrc, blurdst, None, ["-blur", "0x4", "-brightness-contrast", "-30"] )
    process_input_asset(blurdst)

#------------------------------------------------------------------------------
#  Generating content.json
#------------------------------------------------------------------------------
media_assetsJSON = """
{
        "promo_image_large_nobrand": {
          "locators": [
            {
              "path": "assets/game/promo_image_large_nobrand.png"
            }
          ],
          "locators_1_5x": [
            {
              "path": "assets/game/promo_image_large_nobrand_@1.5x.png"
            }
          ],
          "locators_3x": [
            {
              "path": "assets/game/promo_image_large_nobrand_@3x.png"
            }
          ]
        },
        "promo_image_large": {
          "locators": [
            {
              "path": "assets/game/promo_image_large.png"
            }
          ],
          "locators_1_5x": [
            {
              "path": "assets/game/promo_image_large_@1.5x.png"
            }
          ],
          "locators_3x": [
            {
              "path": "assets/game/promo_image_large_@3x.png"
            }
          ]
        },
        "promo_image_medium_nobrand": {
          "locators": [
            {
              "path": "assets/game/promo_image_medium_nobrand.png"
            }
          ],
          "locators_1_5x": [
            {
              "path": "assets/game/promo_image_medium_nobrand_@1.5x.png"
            }
          ],
          "locators_3x": [
            {
              "path": "assets/game/promo_image_medium_nobrand_@3x.png"
            }
          ]
        },
        "promo_image_medium": {
          "locators": [
            {
              "path": "assets/game/promo_image_medium.png"
            }
          ],
          "locators_1_5x": [
            {
              "path": "assets/game/promo_image_medium_@1.5x.png"
            }
          ],
          "locators_3x": [
            {
              "path": "assets/game/promo_image_medium_@3x.png"
            }
          ]
        },
        "promo_image_small_nobrand": {
          "locators": [
            {
              "path": "assets/game/promo_image_small_nobrand.png"
            }
          ],
          "locators_1_5x": [
            {
              "path": "assets/game/promo_image_small_nobrand_@1.5x.png"
            }
          ],
          "locators_3x": [
            {
              "path": "assets/game/promo_image_small_nobrand_@3x.png"
            }
          ]
        },
        "promo_image_small": {
          "locators": [
            {
              "path": "assets/game/promo_image_small.png"
            }
          ],
          "locators_1_5x": [
            {
              "path": "assets/game/promo_image_small_@1.5x.png"
            }
          ],
          "locators_3x": [
            {
              "path": "assets/game/promo_image_small_@3x.png"
            }
          ]
        },
        "promo_box": {
          "locators": [
            {
              "path": "assets/game/promo_box.png"
            }
          ],
          "locators_1_5x": [
            {
              "path": "assets/game/promo_box_@1.5x.png"
            }
          ],
          "locators_3x": [
            {
              "path": "assets/game/promo_box_@3x.png"
            }
          ]
        },
        "product_square": {
          "locators": [
            {
              "path": "assets/game/product_square.png"
            }
          ],
          "locators_1_5x": [
            {
              "path": "assets/game/product_square_@1.5x.png"
            }
          ],
          "locators_3x": [
            {
              "path": "assets/game/product_square_@3x.png"
            }
          ]
        },
        "product_circle": {
          "locators": [
            {
              "path": "assets/game/product_circle.png"
            }
          ],
          "locators_1_5x": [
            {
              "path": "assets/game/product_circle_@1.5x.png"
            }
          ],
          "locators_3x": [
            {
              "path": "assets/game/product_circle_@3x.png"
            }
          ]
        },
        "home_featured_background": {
          "locators": [
            {
              "path": "assets/game/home_featured_background.png"
            }
          ],
          "locators_1_5x": [
            {
              "path": "assets/game/home_featured_background_@1.5x.png"
            }
          ],
          "locators_3x": [
            {
              "path": "assets/game/home_featured_background_@3x.png"
            }
          ]
        },
        "home_featured_background_blur": {
          "locators": [
            {
              "path": "assets/game/home_featured_background_blur.png"
            }
          ],
          "locators_1_5x": [
            {
              "path": "assets/game/home_featured_background_blur_@1.5x.png"
            }
          ],
          "locators_3x": [
            {
              "path": "assets/game/home_featured_background_blur_@3x.png"
            }
          ]
        },
        "featured_background": {
          "locators": [
            {
              "path": "assets/game/featured_background.png"
            }
          ],
          "locators_1_5x": [
            {
              "path": "assets/game/featured_background_@1.5x.png"
            }
          ],
          "locators_3x": [
            {
              "path": "assets/game/featured_background_@3x.png"
            }
          ]
        },
        "home_featured_logo": {
          "locators": [
            {
              "path": "assets/game/home_featured_logo.png"
            }
          ],
          "locators_1_5x": [
            {
              "path": "assets/game/home_featured_logo_@1.5x.png"
            }
          ],
          "locators_3x": [
            {
              "path": "assets/game/home_featured_logo_@3x.png"
            }
          ]
        }
}
"""

def generate_jsons():
    debug_print("generate_jsons()")
    global gContentJson
    print("Generating JSON files.")
    jsonStr = media_assetsJSON
    # We don't generate these yet, find&replace with an alternative
    jsonStr = jsonStr.replace("game/promo_image_small",  "game/promo_image_large")
    jsonStr = jsonStr.replace("game/promo_image_medium", "game/promo_image_large")
    jsonStr = jsonStr.replace("game/promo_box",          "game/promo_image_large")    

    media_assets_dict = json.loads(jsonStr)
    carousels = []
    for key in gCarouselsDict:
        carou_dict = {
            "display_order" : int(key),
            "image" : {
              "locators": [
                {
                  "path": "assets/game/carousels_"+key+".png"
                }
              ],
              "locators_1_5x": [
                {
                  "path": "assets/game/carousels_"+key+"_@1.5x.png"
                }
              ],
              "locators_3x": [
                {
                  "path": "assets/game/carousels_"+key+"_@3x.png"
                }
              ]
            }
        }
        carousels = carousels + [carou_dict]

    media_assets_dict["carousels"] = carousels
    # TODO for some reason "media_assets" is written at the start of the file (not at the end)
    gContentJson["skus"][0]["media_assets"] = media_assets_dict

    with open(gOutputPath + '/content/content.json', 'w') as outfile:
        json.dump(gContentJson, outfile, indent=2)

    with open(gOutputPath + '/content/manifest.json', 'w') as outfile:
        json.dump( {"version":1}, outfile)
      
def main():
    init_paths()
    load_input_asset_paths()
    load_input_content_json()
    generate_all_image_assets()
    generate_jsons()
    print("Outputted tar-ball content in: "+gOutputPath+"/content")


if __name__ == "__main__":
    main()